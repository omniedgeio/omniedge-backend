name: omniedge ecs deploy
on:
    workflow_dispatch:
        inputs:
            envName:
                description: environment [dev,prod]
                default: dev
                required: true
            repoTag:
                description: repoTag
                default: latest
                required: true

jobs:
    webapi-deploy:
        timeout-minutes: 15
        runs-on: ubuntu-latest
        environment: ${{ github.event.inputs.envName || 'dev' }}
        env:
            ENVIRONMENT: ${{ github.event.inputs.envName || 'dev' }}
            REPO_TAG: ${{ github.event.inputs.repoTag || 'latest' }}
        steps:
            -   name: echo github inputs
                run: echo '${{ toJSON(github.event.inputs) }}'

            -   name: notice
                run: |
                  echo "::notice ::environment: ${{env.ENVIRONMENT}}"
                  echo "::notice ::tag: ${{env.REPO_TAG}}"


            -   name: get cluster config variables
                run: |
                    echo "REGISTRY=171635321995.dkr.ecr.us-east-2.amazonaws.com/omniedge-adonis-backend" >> $GITHUB_ENV
                    echo "CLUSTER=webapp-Cluster" >> $GITHUB_ENV
                    echo "CONTAINER=omniedge-adonis-${{ env.ENVIRONMENT }}-Container" >> $GITHUB_ENV
                    echo "SVC=omniedge-adonis-${{ env.ENVIRONMENT }}-Service" >> $GITHUB_ENV
                    echo "TASK=omniedge-adonis-${{ env.ENVIRONMENT }}-Task" >> $GITHUB_ENV

            -   name: echo action used variables
                run: |
                    echo '${{  toJSON(env) }}'

            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
                    aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
                    aws-region: us-east-2


            -   name: Download task definition
                run: |
                    aws ecs describe-task-definition --task-definition ${{ env.TASK }} --query taskDefinition > task-definition.json

            -   name: Fill in the new image ID in the Amazon ECS task definition
                id: task-def
                uses: aws-actions/amazon-ecs-render-task-definition@v1
                with:
                    task-definition: task-definition.json
                    container-name: ${{ env.CONTAINER }}
                    image: ${{env.REGISTRY}}/${{ env.REPO_NAME }}:${{ env.REPO_TAG }}

            -   name: Deploy Amazon ECS task definition
                uses: aws-actions/amazon-ecs-deploy-task-definition@v1
                with:
                    task-definition: ${{ steps.task-def.outputs.task-definition }}
                    service: ${{ env.SVC }}
                    cluster: ${{ env.CLUSTER }}
                    wait-for-service-stability: true
